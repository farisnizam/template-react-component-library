@import "utils";

.dotLogo(@color:@dotColorOrange) {
  display: flex;
  svg * { fill: @color; }
}

.dotLogoOrange() { .dotLogo(@dotColorOrange); }
.dotLogoWhite() { .dotLogo(@dotColorWhite); }

.effect-dot-button-action-basics(@breakpoint: 0, @height: @dotBaseHeight) {
  .resetAnchor();
  height: @height;
  text-align: center;
  display: flex;
  align-items: center;
  justify-content: center;
  white-space: nowrap;
  .mobile({ height: @height - 10px; }, @breakpoint)
}

.effect-dot-button-action-scale-on-hover() {
  .effect-dot-scale-on-hover-and-focus();
}

.effect-dot-button-action(@breakpoint: 0) {
  .effect-dot-button-action-basics(@breakpoint);
  .font3('button-action','normal');
  background: transparent;
  &, a&:visited { color: @dotColorText; }
  .mobile({ .font3('button-action-small','normal'); }, @breakpoint)
}

.effect-dot-button-action-simple() {
  .resetAnchor();
  .effect-dot-round-corners();
  .effect-dot-button-with-background-padding();
  .effect-dot-button-shadow();
  .font3('button-action-small','bold');
  height: @dotInputHeight;
  display: flex;
  text-align: center;
  align-items: center;
  justify-content: center;
  white-space: nowrap;
}

.effect-dot-button-with-background-padding() {
  padding: 0 22px;
}

.effect-dot-button-shadow() {
  box-shadow: 0px 10px 20px 0px rgba(0,0,0,.2);
}

.effect-dot-button-action-contrast-basics(@breakpoint:0) {
  .effect-dot-button-action-basics(@breakpoint);
  .effect-dot-button-action-scale-on-hover();
  .effect-dot-round-corners();
  .effect-dot-button-with-background-padding();
  .effect-dot-button-shadow();
  .font3('button-action','bold');
  .mobile({
    padding: 0 16px;
    .font3('button-action-small','bold');
  }, @breakpoint);
}

.effect-dot-button-action-icon() {
  .icon {
    .size(50px);
    padding: 15px;
  }
}

.effect-dot-button-disabled(@background: @dotColorButtonBackgroundContrast, @textColor: @dotColorTextContrast) {
  &:disabled {
    background: @background;
    &, a&:visited, &:active { 
      .svgAndColor(@textColor);
    }
  }
}

.effect-dot-button-link(@background: transparent, @color: @dotColorOrange) {
  .font3('button-link','normal');
  line-height: 1;
  white-space: nowrap;
  background: @background;
  &, a&:visited, &:active { 
    .svgAndColor(@color);
  }
  &:hover{
    border-bottom: 1px solid @color;
  }
}

.effect-dot-button-action-contrast(@breakpoint:0, @contrastColor: @dotColorButtonBackgroundContrast, @textColor: @dotColorTextContrast) {
  .effect-dot-button-action-contrast-basics(@breakpoint);
  background: @contrastColor;
  &, a&:visited, &:active { 
    .svgAndColor(@textColor);
  }
  .effect-dot-button-disabled(lighten(@contrastColor,20%), darken(@textColor,10%));
}

.effect-dot-button-action-contrast-simple(@contrastColor: @dotColorButtonBackgroundContrast, @textColor: @dotColorTextContrast) {
  .effect-dot-button-action-simple();
  background: @contrastColor;
  &, a&:visited, &:active { 
    .svgAndColor(@textColor);
  }
}

.effect-dot-button-action-contrast-lighter(@breakpoint:0) {
  .effect-dot-button-action-contrast(@breakpoint, @dotColorUIGray, @dotColorTextContrast);
}

.effect-dot-button-action-contrast-transparent-lighter(@breakpoint:0) {
  .effect-dot-button-action-contrast(@breakpoint, transparent, @dotColorUIGray);
  border: 2px solid @dotColorUIGray;
  box-shadow: @dotShadowLarge, inset 0 5px 10px 0 rgba(0,0,0,.1);
}

.effect-dot-button-small-control-secondary() {
  .effect-dot-button-action-contrast(0, transparent, @dotColorUIGray);
  border: 2px solid @dotColorUIGray;
  box-shadow: @dotShadowLarge, inset 0 5px 10px 0 rgba(0,0,0,.1);
  height: 44px;
  padding: 0 15px;
  .font3('button-action','light');
}

.effect-dot-button-action-contrast-on-contrast(@breakpoint:0) {
  .effect-dot-button-action-contrast(@breakpoint,@dotColorButtonBackgroundContrastOnContrast,@dotColorTextContrastOnContrast);
}

.effect-dot-button-action-button(@breakpoint:0) {
  .effect-dot-button-action-contrast(@breakpoint,@dotColorOrange,@dotColorWhite);
}

.effect-dot-button-action-small-control(@breakpoint:0) {
  .effect-dot-button-action-contrast(@breakpoint,@dotColorWhite,@dotColorOrange);
  .effect-dot-button-disabled(@dotColorWhite,fade(@dotColorOrange,92%));
}

.effect-dot-button-no-action-button(@breakpoint:0) {
  .effect-dot-button-action-contrast(@breakpoint, transparent, @dotColorUIGray);
  .font3('button-action','light');
  border: 1px solid @dotColorUIGray;
  box-shadow: @dotShadowLarge, inset 0 5px 10px 0 rgba(0,0,0,.1);
}

.effect-dot-button-control(@size:@dotBaseHeight) {
  .size(@size);
  padding: @size / 6;
  margin: 5px;
  svg { width: 100%; }
}

.paragraph() {
  .font3('paragraph','normal');
  line-height: 1.4;
}

.paragraphColor() {
  color: @dotColorText;
}

.paragraphColorContrast() {
  color: @dotColorTextContrast;
}

.effect-dot-form-text-format() {
  .font3('form','light');
  text-align: left;
}
.effect-dot-form-text-format-small() {
  .font3('form-small','light');
  text-align: left;
}
.inputColor() {
  color: @dotColorText;
}
.inputColorContrast() {
  color: @dotColorTextContrast;
}

.hiddenOnDesktop(@breakpoint:0) { .notmobile({ display: none; }, @breakpoint + 1px); }
.hiddenOnMobile(@breakpoint:0) { .mobile({ display: none; }, @breakpoint); }

/**
 * EFFECTS
 * !!! effects must not delcare sub-selectors !!!
 */
.effect-dot-scale-on-hover(@scale: 1.1) {
  transform: scale(1,1);
  transition: transform .1s linear;
  &:hover { transform: scale(@scale,@scale); }
}
.effect-dot-scale-on-hover-and-focus(@scale: 1.1) {
  transform: scale(1,1);
  &:not(:disabled) {
    transition: transform .1s linear;
    &:hover, &:focus { transform: scale(@scale,@scale); }
  }
}

.effect-dot-of-dots-background(
  @background: @bll,
  @foreground: @dotColorBackgroundLight
) {
  @escapedForeground: escape(@foreground);
  background: url("data:image/svg+xml;charset=UTF8,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' id='Layer_1' x='0px' y='0px' viewBox='0 0 100 100' xml:space='preserve'%3E%3Cdefs%3E%3Cpattern id='dots' viewBox='' width='2.5%25' height='2.2%25'%3E%3Ccircle fill='@{escapedForeground}' r='1' cx='1' cy='1'/%3E%3C/pattern%3E%3Cmask id='circle-mask'%3E%3Crect x='0' y='0' width='100' height='100' fill='white'/%3E%3Ccircle xmlns='http://www.w3.org/2000/svg' cx='50' cy='50' r='25' fill='black'/%3E%3Ccircle xmlns='http://www.w3.org/2000/svg' cx='50' cy='50' r='15.9' fill='white'/%3E%3C/mask%3E%3C/defs%3E%3Ccircle xmlns='http://www.w3.org/2000/svg' cx='50' cy='50' r='50' fill='url(%23dots)' mask='url(%23circle-mask)'/%3E%3C/svg%3E") no-repeat @background;
}

.effect-dot-background-white() { background-color: @dotColorWhite }
.effect-dot-background-black() { background-color: @dotColorBlack }
.effect-dot-background-gray() { background-color: @dotColorBackgroundGrey }
.effect-dot-outline-gray() { outline: 1px solid @dotColorBackgroundGrey }
.effect-dot-background-marketplace-gray() { background-color: @dotColorBackgroundMarketplace }
.effect-dot-large-shadow() { box-shadow: @dotShadowLarge; }
.effect-dot-shadow() { box-shadow: @dotShadow; }
.effect-dot-max-width(@width) { width: 100%; max-width: @width; }
.effect-dot-round-corners(@radius: @dotBaseRadius) { border-radius: @radius; }
.effect-dot-round-corners-double() { .effect-dot-round-corners(@dotBaseRadius*2) }
.effect-dot-round-corners-above(@radius: @dotBaseRadius) { border-radius: @radius @radius 0 0; }

.effect-dot-anchor-basics() {
  &, &:visited, &:active {
    text-decoration: none;
  }
}
.effect-dot-anchor() {
  .effect-dot-anchor-basics();
  line-height: inherit;
  font-size: inherit;
  text-decoration-thickness: 1px;
  &, &:visited, &:active {
    color: @dotColorTextOrange;
  }
  &:hover {
    text-decoration: underline 1px;
  }
}
.effect-dot-anchor-minor() {
  .effect-dot-anchor();
  &, &:visited {
    color: @dotColorText;
  }
  &:hover, &:active {
    color: @dotColorOrange;
    text-decoration: underline 1px;
  }
}
.effect-dot-paragraph-anchor() {
  .effect-dot-anchor();
  &, &:visited, &:active {
    color: @dotColorText;
    text-decoration: underline 1px;
  }
  &:hover {
    color: @dotColorTextOrange;
  }
}
.effect-dot-anchor-bold() {
  .effect-dot-anchor();
  font-weight: 800;
  text-decoration-thickness: 2px;
  &:hover {
    text-decoration: underline 2px;
  }  
}
.effect-dot-anchor-soft() {
  .effect-dot-anchor-basics();
  &, &:visited, &:active, &:hover {
    font-size: inherit;
    font-weight: inherit;
    color: inherit;
    text-decoration: underline;
    text-decoration-thickness: 1px;
  }
}

.effect-dot-form-title() {
  .font3('form-title', 'light');
  color: @dotColorText;
  text-transform: uppercase;
  line-height: 1;
  // it's what comes after that defines how far from title it goes (e.g. description or subtitle)
  margin: 0 0;
}
.effect-dot-title-description() {
  .font3('form-title-description', 'light');
  color: @dotColorTextOrange;
  line-height: 1;
  margin-top: 15px;
}

.effect-dot-form-text-input() {
  .effect-dot-background-gray();
  .effect-dot-large-shadow();
  .effect-dot-round-corners();
  .effect-dot-form-text-format();
  border: 0.15rem solid @dotColorWhite;
  padding: 0px 24px; // Y padding used to be 8 but it's not needed
  height: @dotInputHeight;
  color: @dotColorText;
  &::placeholder {
    color: @dotColorTextPlaceholder;
  }
  &:focus {
    border-color: @dotColorButtonBackgroundContrast;
  }
  &.touched:invalid {
    border-color: @colorInvalid;
  }
}

.effect-dot-form-select() {
  .effect-dot-background-gray();
  .effect-dot-large-shadow();
  .effect-dot-round-corners();
  .effect-dot-form-text-format();
  background: url("data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8'%3F%3E%3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E%3Csvg enable-background='new 0 0 292.362 292.362' version='1.1' viewBox='0 0 292.36 292.36' xml:space='preserve' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='m286.94 69.377c-3.614-3.617-7.898-5.424-12.848-5.424h-255.81c-4.952 0-9.233 1.807-12.85 5.424-3.617 3.621-5.424 7.902-5.424 12.851 0 4.948 1.807 9.229 5.424 12.847l127.91 127.91c3.621 3.617 7.902 5.428 12.85 5.428s9.233-1.811 12.847-5.428l127.91-127.91c3.613-3.617 5.427-7.898 5.427-12.847 0-4.948-1.814-9.229-5.427-12.85z'/%3E%3C/svg%3E") no-repeat @dotColorBackgroundGrey;
  background-size: 8px;
  background-position-x: calc(100% ~'-' 10px);
  background-position-y: center;
  position: relative;
  border: 0.15rem solid @dotColorWhite;
  padding: 0px 34px 0 24px; // Y padding used to be 8 but it's not needed
  height: @dotInputHeight;
  color: @dotColorText;
  appearance: none; // remove browser's default crapadoodles like left spacing
  line-height: 1.5; // so the selected option is not undercut
  &::-ms-expand { display: none; }
  &:required:invalid {
    color: @dotColorTextPlaceholder;
  }
  &:focus {
    border-color: @dotColorButtonBackgroundContrast;
  }
  &.touched:invalid {
    border-color: @colorInvalid;
  }
  &::after {
    .absPosition(0,0,0);
    width: 24px;
    padding: 7px;
    content: "\25BC";
  }
  option {
    background: @dotColorBackgroundLight;
    color: @dotColorText;
  }
}

.effect-dot-form-password-input() {
  position: relative;
  input {
    .effect-dot-background-gray();
    .effect-dot-large-shadow();
    .effect-dot-round-corners();
    .effect-dot-form-text-format();
    border: 0.15rem solid @dotColorWhite;
    padding: 8px 86px 8px 24px;
    height: @dotInputHeight;
    &:focus {
      border-color: @dotColorButtonBackgroundContrast;
    }
  }
  .password-strength-display {
    .absPosition(0.15rem,0.15rem,0.15rem);
    .effect-dot-round-corners();
    .font3('password-strength','extrabold');
    background: @dotColorWhite;
    width: 76px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  &.password-strength-0 {
    .password-strength-display { color: @colorInvalid }
    input, input:focus { border-color: @colorInvalid }
  }
  &.password-strength-1 {
    .password-strength-display { color: @colorWarning }
    input, input:focus { border-color: @colorWarning }
  }
  &.password-strength-2 {
    .password-strength-display { color: @colorWarningLight }
    input, input:focus { border-color: @colorWarningLight }
  }
  &.password-strength-3 {
    .password-strength-display { color: @colorValid }
    input, input:focus { border-color: @colorValid }
  }

}

.effect-dot-form-confirm-new-password-input() {
  position: relative;
  
  input {
    .effect-dot-background-gray();
    .effect-dot-large-shadow();
    .effect-dot-round-corners();
    .effect-dot-form-text-format();
    border: 0.15rem solid @dotColorWhite;
    padding: 8px 106px 8px 24px;;
    height: @dotInputHeight;
    &:focus {
      border-color: @dotColorButtonBackgroundContrast;
    }
  }
 
  .confirm-new-password-match-display {
    .absPosition(0.15rem,0.15rem,0.15rem);
    .effect-dot-round-corners();
    .font3('password-strength','extrabold');
    background: @dotColorWhite;
    width: 96px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  &.confirm-new-password-no-match {
    .confirm-new-password-match-display { color: @colorInvalid }
    input, input:focus { border-color: @colorInvalid }
  }
  &.confirm-new-password-match {
    .confirm-new-password-match-display { color: @colorValid }
    input, input:focus { border-color: @colorValid }
  }
}

.effect-dot-form-disclaimer() {
  .font3('form-disclaimer', 'normal');
  font-style: italic;
  text-align: left;
}

.effect-dot-icon(@color: @dotColorText, @colorOnHover: @dotColorText) {
  & when (@color = @colorOnHover) {
    .svgAndColor(@color);
  }
  & when not (@color = @colorOnHover) {
    .svgHoverable(@color, @colorOnHover);
  }
}

.effect-dot-form-phone-input() {
  @phoneInputWidth: 78px;

  .effect-dot-background-gray();
  .effect-dot-large-shadow();
  .effect-dot-round-corners();
  .effect-dot-form-text-format();
  position: relative;
  height: @dotInputHeight;

  &.touched:invalid {
    border-color: @colorInvalid;
  }

  display: flex;

  .country-code {
    position: absolute;
    .absPosition(0.15rem,auto,0.15rem,0.15rem);
    .effect-dot-round-corners();
    width: @phoneInputWidth;
    z-index: 1;
  }
  
  .country-code-select {
    opacity: 0;
    padding: 0;
    margin: 0;
    border: none;
  }

  .country-code-display {
    pointer-events: none;
    display: flex;
    align-items: center;
    justify-content: center;
    outline: 0.15rem solid transparent;
    background: white;
    &:empty::after {
      content: '+';
    }
  }

  .country-code-select:focus + .country-code-display {
    outline-color: @dotColorButtonBackgroundContrast;
  }

  input {
    z-index: 0;
    flex-grow: 1;
    padding: 8px 24px 8px 24px/2 + @phoneInputWidth;
    .effect-dot-round-corners();
    border: 0.15rem solid @dotColorWhite;
    height: @dotInputHeight;
    &, &:hover, &:focus {
      background: none;
    }
    &:focus {
      border-color: @dotColorButtonBackgroundContrast;
    }
  }
}

/**
<label>
  <input type="checkbox"/>
  <span class="checkbox"></span>
  My label
</label>
*/
.molecule-dot-form-labeled-checkbox-input() {
  // reset globals
  margin: 0;
  
  // mixins and self
  .effect-dot-form-text-format-small();
  .effect-row();
  align-items: baseline;
  cursor: pointer;
  position: relative;

  // label anchors
  a {
    .effect-dot-paragraph-anchor();
    .effect-dot-form-text-format-small();
  }

  user-select: none;

  // sub elements
  span.checkbox {
    @outlineSize: 3px;
    border-radius: 0;
    background: white;
    outline: @outlineSize solid @dotColorButtonBackgroundContrast;
    position: relative;
    .size(10px);
    margin-right: @outlineSize + 6px;
    &::after {
      visibility: hidden;
      content: "\2718";
      color: @dotColorButtonBackgroundContrast;
      .font3('form-checkbox-mark','bold');
      line-height: 1;
      text-align: center;
      .absPositionFill();
    }
  }

  &:focus,
  input[type=checkbox]:focus, input[type=checkbox]:active {
    & + span.checkbox {
      outline-color: @dotColorOrange;
    }
  }

  &:hover input[type=checkbox]:not(:checked) ~ span.checkbox {
    background: @dotColorOffWhite;
  }

  input[type=checkbox] {
    .size(1px); // so the browser can tell you to check it to proceed
    .absPosition(18px,auto,auto,8px); // position right under the .checkbox
    opacity: 0; // not interested in seeing it
    &:checked ~ .checkbox::after {
      visibility: visible;
    }
  }
}

.effect-row { display: flex; flex-direction: row; }
.effect-row-siblings-space(@space) { & > * + * { margin-left: @space } }
.effect-column { display: flex; flex-direction: column; }
.effect-column-siblings-space(@space) { & > * + * { margin-top: @space } }
.effect-screen-height(@height: 100) { min-height: ~"@{height}%"; min-height: ~"@{height}vh"; }

.effect-dot-page-root(@flex-align: flex-start, @flex-justify: flex-start) {
  .effect-screen-height();
  .effect-column();
  align-items: @flex-align;
  justify-content: @flex-justify;
}

.effect-loading-animation(@size, @color) {
  width: @size;
  height: @size;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;

  & > .dot {
    position: absolute;
    width: @size / 3;
    height: @size / 3;
    background: @color;
    border-radius: 100%;
    transform: scale(0);
    box-sizing: content-box;

    animation: 0s ease 0ms 1 normal none running animateDot;
    animation-duration: 2000ms;
    animation-delay: 0.1s;
    animation-timing-function: ease-in-out;
    animation-iteration-count: infinite;
    animation-direction: normal;
  }

  & > .circle {
    width: @size / 2;
    height: @size / 2;
    border: @size / 4 solid @color;
    border-radius: 100%;
    transform: scale(0);
    box-sizing: content-box;

    animation: 0s ease 0ms 1 normal none running animateCircle;
    animation-duration: 2000ms;
    animation-timing-function: ease-in-out;
    animation-iteration-count: infinite;
    animation-direction: normal;
  }

  @keyframes animateDot {
    0% { transform: scale(0);}
    15% { transform: scale(1.2);}
    25% { transform: scale(1); }
    40% { transform: scale(1); }
    60% { transform: scale(0.0); }
    100% { transform: scale(0.0); }
  }

  @keyframes animateCircle {
    0% { transform: scale(0);}
    15% { transform: scale(1.3);}
    25% { transform: scale(1); }
    40% { transform: scale(1); }
    50% { transform: scale(1.3);}
    70% { transform: scale(0.0); }
    100% { transform: scale(0.0); }
  }
}

/**
 * MOLECULES
 */

/*
... {.dot-style} ...
  <form class="--dot-auth-style-form--"> <-- acts as container
    <h1>...</h1>
    <p>...</p> <-- right after h1
    <input /> <-- will be 100%
    <div class="row"> <-- will adjust to fit inside inputs to 100%
      <input />
      <input class="grow"/> <-- will try to occupy more
    </div>
    <input /> <-- will be 100%
  </form>
...
*/
.molecule-dot-auth-style-form(@width: 600px) {
  // form mixins
  .effect-dot-max-width(@width);
  .effect-column();
  .effect-column-siblings-space(@dotInputSpace);
  // form declarations
  text-align: center;
  // sub elements
  h1 { .effect-dot-form-title() }
  h1 + h2 { .effect-dot-title-description() }
  h1, h1 + h2, h1 + p {
    & + .group {
      margin-top: 40px;
    }
  }
  p {
    .effect-dot-form-text-format();
    text-align: center;
    &.disclaimer {
      .effect-dot-form-disclaimer();
    }
  }
  input[type=number], input[type=text], input[type=email], input[type=password] {
    .effect-dot-form-text-input();
    width: 100%;
  }

  // this is required because some selects are inside other inputs, like phone input
  & > select, .group > select {
    .effect-dot-form-select();
    .ellipsis();
    width: 100%;
  }

  label {
    .paragraph();
    .paragraphColor();
    .molecule-dot-form-labeled-checkbox-input();
  }

  button[type=submit] {
    width: 100%;
    .effect-dot-button-action-contrast();
    height: 44px;
  }
  .row {
    .effect-row();
    .effect-row-siblings-space(@dotInputSpaceSmall);
    &.fifty-fifty {
      & > * { width: 50% }
    }
  }
  .group {
    margin: @dotInputSpace 0;
    .effect-column();
    .effect-column-siblings-space(@dotInputSpace);
    label + label {
      margin-top: @dotInputSpaceSmall;
    }
  }

  .error-message {
    .font3('form-small','bold');
    color: @colorInvalid;
    padding: 10px;
    &:empty {
      &::after {
        content: "\00a0";
        user-select: none;
      }
    }
  }

  .new-password-input {
    .effect-dot-form-password-input()
  }

  .confirm-new-password-input {
    .effect-dot-form-confirm-new-password-input()
  }
}

/*
... {.dot-style} ...
  <form class="--dot-auth-style-form--"> <-- acts as container
    <h1>...</h1>
    <p>...</p> <-- right after h1
    <input /> <-- will be 100%
    <div class="row"> <-- will adjust to fit inside inputs to 100%
      <input />
      <input class="grow"/> <-- will try to occupy more
    </div>
    <input /> <-- will be 100%
  </form>
...
*/
.molecule-dot-form(@width: 600px, @paragraph-align: center) {
  // form mixins
  .effect-dot-max-width(@width);
  .effect-column();
  .effect-column-siblings-space(@dotInputSpace);
  // form declarations
  text-align: center;
  // sub elements
  h1 { .effect-dot-form-title() }
  h1 + h2 { .effect-dot-title-description() }
  h1, h1 + h2, h1 + p {
    & + .group {
      margin-top: 40px;
    }
  }
  p {
    .effect-dot-form-text-format();
    text-align: @paragraph-align;
    &.disclaimer {
      .effect-dot-form-disclaimer();
    }
  }
  input[type=number], input[type=text], input[type=email], input[type=password] {
    .effect-dot-form-text-input();
    width: 100%;
  }
  select {
    .effect-dot-form-select();
    width: 100%;
  }

  label {
    .paragraph();
    .paragraphColor();
    .molecule-dot-form-labeled-checkbox-input();
  }

  button[type=submit] {
    width: 100%;
    .effect-dot-button-action-contrast();
    height: 44px;
  }
  .row {
    .effect-row();
    .effect-row-siblings-space(@dotInputSpaceSmall);
    &.fifty-fifty {
      & > * { width: 50% }
    }
  }
  .group {
    margin: @dotInputSpace 0;
    .effect-column();
    .effect-column-siblings-space(@dotInputSpace);
    label + label {
      margin-top: @dotInputSpaceSmall;
    }
  }

  .error-message {
    .font3('form-small','bold');
    color: @colorInvalid;
    padding: 10px;
    &:empty {
      &::after {
        content: "\00a0";
        user-select: none;
      }
    }
  }

  .new-password-input {
    .effect-dot-form-password-input()
  }

  .confirm-new-password-input {
    .effect-dot-form-confirm-new-password-input()
  }
}

.molecule-dot-form-submit-button-small() {
  button[type=submit] {
    .effect-dot-button-action-contrast();
    margin-top: @dotInputSpace * 2;
    width: 200px;
    align-self: left;
  }
}

/*
... {.dot-style} ...
  <label class="--dot-labeled-input--">
    <span class="label-text">Some text</span>
    <input type="text|..." placeholder="" value="">
  </label>
...
*/
.molecule-dot-labeled-input() {
  .paragraph();
  .paragraphColor();
  display: flex;
  flex-direction: column;
  .label-text:not(:empty) + input {
    margin-top: 10px;
  }
}

/*
... {.dot-style} ...
  <div class="--dot-search-input-- empty|not-empty">
    <input type="text" placeholder="Search" value="">
    <button class="search"></button>
    <button class="clear"></button>
  </div>
...
*/
.molecule-dot-search-input() {
  position: relative;

  input {
    .effect-dot-form-text-input();
    height: 40px;
    .font3('marketplace-search-input-text', 'normal');
    padding: 0 25px;
  }

  .search, .clear {
    .effect-dot-icon();
    .absPosition(0,3px,0);
    display: flex;
    align-items: center;
    justify-content: center;
    width: 50px;
  }  

  .search {
    padding: 0 15px;
  }
  .clear {
    padding: 0 17px;
  }
  
  &.empty {
    .search { display: flex; }
    .clear { display: none; }
  }

  &.not-empty {
    .search { display: none; }
    .clear { display: flex; }
  }

}

/*
<___ class="--dot-expand-collapse-heading-- ?expanded">
  <button class="expand-collapse">
    <h2>--text--</h2>
    <span class="expand">${plusIcon}</span>
    <span class="collapse">${minusIcon}</span>
  </button>
  <div class="content"></div>
</___>
*/
.molecule-dot-expand-collapse(@from: 0px) {

  & > button.expand-collapse {
    width: 100%;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    h2 {
      .font3('h2', 'extrabold');
      color: @dotColorText;
      text-align: left;
      flex-grow: 1;
    }
    .expand, .collapse {
      flex-grow: 0;
      width: 50px;
      min-width: 50px;
      padding: 0 5px;
      display: flex;
      justify-content: center;
      align-items: center;
    }
  }

  .expand-collapse-behavior() {
    & > button.expand-collapse {
      .expand { display: flex; }
      .collapse { display: none; }
    }
    & > .content {
      display: none;
    }
    &.expanded {
      & > button.expand-collapse {
        .expand { display: none; }
        .collapse { display: flex; }
      }
      & > .content { display: block; }
    }
  }

  // & when (@from = 0px) {
  //   .expand-collapse-behavior();
  // }

  // & when not (@from > 0px) {
    .notmobile({
      & > button.expand-collapse {
        display: none;
      }
    }, @from+1);
    .mobile({
      .expand-collapse-behavior();
    }, @from);
  // }
}

.molecule-dot-auth-general(@width: 600px) {
  // mixins
  .effect-dot-max-width(@width);
  .effect-column();
  
  // declarations
  align-items: center;
  text-align: center;
  
  // sub elements
  h1 { .effect-dot-form-title() }
  
  h1 + h2 { .effect-dot-title-description() }
  
  p {
    .effect-dot-form-text-format();
    text-align: center;
    &.disclaimer {
      .effect-dot-form-disclaimer();
    }
  }
}

/*
<table>
  <thead>
    <tr>
      <th></th>
      <th></th>
      ...
    </tr>
  </thead>
  <tbody>
    <tr>
      <td></td>
      <td></td>
      ...
    </tr>
    <tr>
      <td></td>
      <td></td>
      ...
    </tr>
    ...
  </tbody>
  <tfoot>
    <tr>
      <td></td>
      <td></td>
      ...
    </tr>
  </tfoot>
</table>
</___>
*/
.effect-dot-table-header() {
  .font3('table-header', 'extrabold');
  color: @dotColorText;
}
.effect-dot-table-cell() {
  .font3('table-cell', 'light');
  color: @dotColorText;
}
.effect-dot-table-align-column(@n, @position) {
  th:nth-child(@{n}), td:nth-child(@{n}) {
    text-align: @position;
  }
}
.effect-dot-table-align-column-left(@n) {
  .effect-dot-table-align-column(@n,left);
}
.effect-dot-table-align-column-center(@n) {
  .effect-dot-table-align-column(@n,center);
}
.effect-dot-table-align-column-right(@n) {
  .effect-dot-table-align-column(@n,right);
}
.molecule-dot-table() {
  .effect-dot-large-shadow();
  .effect-dot-round-corners();
  border-collapse: separate;
  border-spacing: 15px 30px;
  *border-collapse: expression('separate', cellSpacing='15px 30px');
  background-color: @dotColorWhite;
  padding: 0px 20px 5px;

  thead {
    border: none;
  }

  th, td {
    padding: 0;
    vertical-align: center;
    text-align: left;
  }

  th {
    .effect-dot-table-header()
  }

  td {
    .effect-dot-table-cell()
  }
}

.effect-error-message() {
  .effect-dot-round-corners();
  .atomFont(14,bold);
  border: 2px solid @colorInvalid;
  color: @colorInvalid;
  padding: 12px 15px;
  margin: 15px 0 20px;
  max-width: 960px;
  // &:empty {
  //   &::after {
  //     content: "\00a0";
  //     user-select: none;
  //   }
  // }
}

.effect-horizontal-under-scroll-bar(@color: @dotColorOrange) {
  
  justify-content: flex-start;
  flex-direction: row;
  flex-grow: 1;
  position: relative;
  overflow: hidden;
  overflow-x: auto;

  /* Demonstrate a "mostly customized" scrollbar
   * (won't be visible otherwise if width/height is specified) */
   &::-webkit-scrollbar {
    .absPosition(auto,0,0,0);
    .dotActivatableVisibilityMixin(0s,false);
    width: 100%;
    height: 0;
    background-color: rgba(255,255,255,.4);
    border-radius: 3px;
    cursor: pointer;
  }
  
  /* Add a thumb */
  &::-webkit-scrollbar-thumb {
    background: @color;
    .dotActivatableVisibilityMixin(0s,false);
    cursor: pointer;
    border-radius: 3px;
  }

  &:hover {
    height: calc(100% + @scrollBarWidth);
    &::-webkit-scrollbar {
      height: @scrollBarWidth;
      .dotActivatableVisibilityMixin_active(0.2s);
    }
    &::-webkit-scrollbar-thumb {
      .dotActivatableVisibilityMixin_active(0.2s);
    }
  }

}

.effect-vertical-scroll-bar(@color: @dotColorOrange) {
  
  justify-content: flex-start;
  flex-direction: row;
  flex-grow: 1;
  position: relative;
  overflow: hidden;
  overflow-y: scroll;

  /* Demonstrate a "mostly customized" scrollbar
   * (won't be visible otherwise if width/height is specified) */
   &::-webkit-scrollbar {
    .absPosition(auto,0,0,0);
    width: @scrollBarWidth;
    border-radius: 3px;
    cursor: pointer;
  }
  
  /* Add a thumb */
  &::-webkit-scrollbar-thumb {
    background: @color;
    .dotActivatableVisibilityMixin(0s,false);
    cursor: pointer;
    border-radius: 3px;
  }

  &:hover {
    &::-webkit-scrollbar {
      background-color: rgba(255,255,255,.4);
    }
    &::-webkit-scrollbar-thumb {
      .dotActivatableVisibilityMixin_active(0.2s);
    }
  }

}


.effect-vertical-scroll-bar-overlay(@color: @dotColorOrange) {
  
  justify-content: flex-start;
  flex-direction: row;
  flex-grow: 1;
  position: relative;
  overflow: hidden;
  overflow-y: auto;

  /* Demonstrate a "mostly customized" scrollbar
   * (won't be visible otherwise if width/height is specified) */
   &::-webkit-scrollbar {
    .absPosition(auto,0,0,0);
    width: 0;
    background-color: rgba(255,255,255,.6);
    border-radius: 3px;
    cursor: pointer;
  }
  
  /* Add a thumb */
  &::-webkit-scrollbar-thumb {
    background: @color;
    .dotActivatableVisibilityMixin(0s,false);
    cursor: pointer;
    border-radius: 3px;
  }

  &:hover {
    &::-webkit-scrollbar {
      width: @scrollBarWidth;
    }
    &::-webkit-scrollbar-thumb {
      .dotActivatableVisibilityMixin_active(0.2s);
    }
  }

}

.molecule-dot-settings(@width: 600px) {
  // form mixins
  .effect-dot-max-width(@width);
  .effect-column();
  .effect-column-siblings-space(@dotInputSpace);
  // form declarations
  text-align: center;
  // sub elements
  h1 { .effect-dot-form-title() }
  h1 + h2 { .effect-dot-title-description() }
  h1, h1 + h2, h1 + p {
    & + .group {
      margin-top: 40px;
    }
  }
  p {
    .effect-dot-form-text-format();
    text-align: left;
  }
  input[type=number], input[type=text], input[type=email], input[type=password] {
    .effect-dot-form-text-input();
    width: 100%;
  }
  label {
    .paragraph();
    .paragraphColor();
    .molecule-dot-form-labeled-checkbox-input();
  }
  .row {
    .effect-row();
    .effect-row-siblings-space(@dotInputSpaceSmall);
  }
  .group {
    margin: @dotInputSpace 0;
    .effect-column();
    .effect-column-siblings-space(@dotInputSpace);
    label + label {
      margin-top: @dotInputSpaceSmall;
    }
  }
  select, input {
    padding: 7px 4px;
  }
}